@page "/pinball/catalogs"
@using global::Pinball.Entities.Api.Responses.PinballCatalog
@using PinIQ.Blazor.Services
@inject PinballCatalogService PinballCatalogService
@inject NavigationManager Navigation

<PageTitle>Pinball Catalogs</PageTitle>

<h1>Pinball Catalogs</h1>

@if (!_pinballCatalogSnapshots.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table clickTable">
        <thead>
        <tr>
            <th>Imported</th>
            <th>Newest Machine</th>
            <th>Machine Count</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var catalogSnapshot in _pinballCatalogSnapshots)
        {
            <tr @onclick="@(() => Navigation.NavigateTo($"/pinball/catalogs/{catalogSnapshot.Key}"))">
                <td>@catalogSnapshot.Value.Imported.Date.ToShortDateString()</td>
                <td>@catalogSnapshot.Value.NewestMachine</td>
                <td>@catalogSnapshot.Value.MachineCount</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private Dictionary<int, CatalogSnapshot> _pinballCatalogSnapshots = [];

    protected override async Task OnInitializedAsync()
    {
        _pinballCatalogSnapshots = await PinballCatalogService.GetCatalogSnapshots();
        
        PinballCatalogService.OnCatalogSnapshotAdded += (snapshot) =>
        {
            _pinballCatalogSnapshots.Add(snapshot.Id, snapshot);
            StateHasChanged();
        };

        PinballCatalogService.OnCatalogSnapshotRemoved += (id) =>
        {
            _pinballCatalogSnapshots.Remove(id);
            StateHasChanged();
        };
        
        await PinballCatalogService.StartNotifications();
    }
}